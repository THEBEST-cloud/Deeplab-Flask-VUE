# camera-ready

import torch
import torch.nn as nn

import numpy as np

def add_weight_decay(net, l2_value, skip_list=()):
    # https://raberrytv.wordpress.com/2017/10/29/pytorch-weight-decay-made-easy/

    decay, no_decay = [], []
    for name, param in net.named_parameters():
        if not param.requires_grad:
            continue # frozen weights
        if len(param.shape) == 1 or name.endswith(".bias") or name in skip_list:
            no_decay.append(param)
        else:
            decay.append(param)

    return [{'params': no_decay, 'weight_decay': 0.0}, {'params': decay, 'weight_decay': l2_value}]

# function for colorizing a label image:
def label_img_to_color(img):
    label_to_color = {
        # 0: [128, 64,128],
        # 1: [244, 35,232],
        # 2: [ 70, 70, 70],
        # 3: [102,102,156],
        # 4: [190,153,153],
        # 5: [153,153,153],
        # 6: [250,170, 30],
        # 7: [220,220,  0],
        # terrace
        0: [0, 0, 0],
        1: [0, 0, 128],
        2: [0, 128, 0],
        3: [0, 128, 128],
        4: [128, 0, 0],
        5: [128, 0, 128],
        6: [0, 128, 128],
        7: [107,142, 35],
        8: [152,251,152],
        9: [70, 70, 70],
        10: [156, 102, 102],
        11: [12, 228, 254],
        12: [12, 148,254 ],
        13: [153, 153, 190],
        14: [153, 153, 153],
        15: [96, 22, 255],
        16: [0, 51, 102],
        17: [150, 143, 9],
        18: [32, 11, 119],
        19: [0, 51, 51],
        20: [190, 250, 190],
        21: [146, 150, 112],
        22: [115, 135, 2],
        23: [0, 0, 255]
        # 10: [ 70,130,180],
        # 11: [220, 20, 60],
        # 12: [255,  0,  0],
        # 13: [  0,  0,142],
        # 14: [  0,  0, 70],
        # 15: [  0, 60,100],
        # 16: [  0, 80,100],
        # 17: [  0,  0,230],
        # 18: [119, 11, 32],
        # 19: [81,  0, 81],
        # 20: [190, 250, 190],
        # 21: [146, 150, 112],
        # 22: [115, 135, 2],
        # 23: [0, 0, 255]

            # 0:[0,0,0],
            # 1:[128,128,192],
            # 2:[0,128,0],
            # 3:[128,128,128],
            # 4:[0,0,128],
            # 5:[128,0,0],
            # 6:[128,0,192],
            # 7:[0,0,192],
            # 8:[0,128,192],
            # 9:[0,64,0],
            # 10:[0,128,128],
            # 11:[128,128,0]

        # Dataset_sdd
        # 0: [0, 0, 0],
        # 1: [128, 64, 128],
        # 2: [0, 76, 130],
        # 3: [0, 102, 0],
        # 4: [87, 103, 112],
        # 5: [168, 42, 28],
        # 6: [30, 41,48 ],
        # 7: [89, 50, 0],
        # 8: [35, 142, 107],
        # 9: [70, 70, 70],
        # 10: [156, 102, 102],
        # 11: [12, 228, 254],
        # 12: [12, 148,254 ],
        # 13: [153, 153, 190],
        # 14: [153, 153, 153],
        # 15: [96, 22, 255],
        # 16: [0, 51, 102],
        # 17: [150, 143, 9],
        # 18: [32, 11, 119],
        # 19: [0, 51, 51],
        # 20: [190, 250, 190],
        # 21: [146, 150, 112],
        # 22: [115, 135, 2],
        # 23: [0, 0, 255]

        # rice
        # 0: [0, 0, 0],
        # 1: [128, 64, 128],
        # 2: [0, 76, 130],
        # 3: [0, 102, 0],
        # 4: [87, 103, 112],
        # 5: [168, 42, 28]
            # 0:[0,0,0],
            # 1:[128,128,192],
            # 2:[0,128,0],
            # 3:[128,128,128],
            # 4:[0,0,128],
            # 5:[128,0,0],
            # 6:[128,0,192],
            # 7:[0,0,192],
            # 8:[0,128,192],
            # 9:[0,64,0],
            # 10:[0,128,128],
            # 11:[128,128,0]
        }

    img_height, img_width = img.shape
    # print(img.shape)
    # img_height, img_width = img.shape[1],img.shape[2]

    img_color = np.zeros((img_height, img_width, 3))
    for row in range(img_height):
        for col in range(img_width):
            label = img[row, col]

            img_color[row, col] = np.array(label_to_color[label])

    return img_color
